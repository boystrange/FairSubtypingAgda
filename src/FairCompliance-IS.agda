-- MIT License

-- Copyright (c) 2021 Luca Ciccone and Luca Padovani

-- Permission is hereby granted, free of charge, to any person
-- obtaining a copy of this software and associated documentation
-- files (the "Software"), to deal in the Software without
-- restriction, including without limitation the rights to use,
-- copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the
-- Software is furnished to do so, subject to the following
-- conditions:

-- The above copyright notice and this permission notice shall be
-- included in all copies or substantial portions of the Software.

-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
-- EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
-- OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
-- NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
-- HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
-- WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-- FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
-- OTHER DEALINGS IN THE SOFTWARE.

open import Data.Product
open import Data.Empty
open import Data.Sum
open import Data.List
open import Data.Fin
open import Data.Bool renaming (Bool to ùîπ)
open import Relation.Unary using (_‚àà_; _‚äÜ_)
open import Relation.Binary.Construct.Closure.ReflexiveTransitive
open import Relation.Binary.PropositionalEquality
open import Relation.Nullary

open import Common

open import is-meta.InfSys as IS
open MetaRule
open IS.IS
open import is-meta.InfSys.Properties
open import is-meta.InfSys.Principles

module FairCompliance-IS where

  message : Message ùîπ
  message = record{_?=_ = Data.Bool._‚âü_}

  open import SessionType message
  open import Session message
  open import Transitions message
  
  U : Set
  U = SessionType √ó SessionType

  data FCompIS-RN : Set where
    client-end : FCompIS-RN
    oi-true oi-false oi-both : FCompIS-RN
    io-true io-false io-both : FCompIS-RN

  data FCompCOIS-RN : Set where
    co-oi co-io : FCompCOIS-RN

  client-end-r : MetaRule U
  client-end-r .C = SessionType √ó SessionType
  client-end-r .comp (S , T) =
    [] ,
    --------------------
    (S , T) , (Win S √ó Defined T)

  OI-true-r : MetaRule U
  OI-true-r .C = Continuation √ó Continuation
  OI-true-r .comp (f , g) =
    (f true .force , g true .force) ‚à∑ [] ,
    --------------------
    (out f , inp g) , (dom f true √ó ¬¨ dom f false)

  OI-false-r : MetaRule U
  OI-false-r .C = Continuation √ó Continuation
  OI-false-r .comp (f , g) =
    (f false .force , g false .force) ‚à∑ [] ,
    --------------------
    (out f , inp g) , (dom f false √ó ¬¨ dom f true)

  OI-both-r : MetaRule U
  OI-both-r .C = Continuation √ó Continuation
  OI-both-r .comp (f , g) =
    (f true .force , g true .force) ‚à∑ (f false .force , g false .force) ‚à∑ [] ,
    --------------------
    (out f , inp g) , (dom f true √ó dom f false)

  IO-true-r : MetaRule U
  IO-true-r .C = Continuation √ó Continuation
  IO-true-r .comp (f , g) =
    (f true .force , g true .force) ‚à∑ [] ,
    --------------------
    (inp f , out g) , (dom g true √ó ¬¨ dom g false)

  IO-false-r : MetaRule U
  IO-false-r .C = Continuation √ó Continuation
  IO-false-r .comp (f , g) =
    (f false .force , g false .force) ‚à∑ [] ,
    --------------------
    (inp f , out g) , (dom g false √ó ¬¨ dom g true)

  IO-both-r : MetaRule U
  IO-both-r .C = Continuation √ó Continuation
  IO-both-r .comp (f , g) =
    (f true .force , g true .force) ‚à∑ (f false .force , g false .force) ‚à∑ [] ,
    --------------------
    (inp f , out g) , (dom g true √ó dom g false)

  co-IO-r : MetaRule U
  co-IO-r .C = Continuation √ó Continuation √ó ùîπ
  co-IO-r .comp (f , g , x) =
    (f x .force , g x .force) ‚à∑ [] ,
    --------------------
    (inp f , out g) , dom g x

  co-OI-r : MetaRule U
  co-OI-r .C = Continuation √ó Continuation √ó ùîπ
  co-OI-r .comp (f , g , x) =
    (f x .force , g x .force) ‚à∑ [] ,
    --------------------
    (out f , inp g) , dom f x

  FCompIS : IS U
  FCompIS .Names = FCompIS-RN
  FCompIS .rules client-end = client-end-r
  FCompIS .rules oi-true = OI-true-r
  FCompIS .rules oi-false = OI-false-r
  FCompIS .rules oi-both = OI-both-r
  FCompIS .rules io-true = IO-true-r
  FCompIS .rules io-false = IO-false-r
  FCompIS .rules io-both = IO-both-r

  FCompCOIS : IS U
  FCompCOIS .Names = FCompCOIS-RN
  FCompCOIS .rules co-oi = co-OI-r
  FCompCOIS .rules co-io = co-IO-r

  _‚ä¢_ : SessionType ‚Üí SessionType ‚Üí Set
  S ‚ä¢ T = Gen‚ü¶ FCompIS , FCompCOIS ‚üß (S , T)

  _‚ä¢·µ¢_ : SessionType ‚Üí SessionType ‚Üí Set
  S ‚ä¢·µ¢ T = Ind‚ü¶ FCompIS ‚à™ FCompCOIS ‚üß (S , T)


  {- Soundness -}
  ‚ä¢·µ¢-implies-succeed : ‚àÄ{S T} ‚Üí S ‚ä¢·µ¢ T ‚Üí MaySucceed (S # T)
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ client-end , (S , T) , refl , (win , def) , _)) = (S # T) , Œµ , win#def win def
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ oi-true , (f , g) , refl , (ok-t , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync (out ok-t) inp ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ oi-false , (f , g) , refl , (ok-f , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync (out ok-f) inp ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ oi-both , (f , g) , refl , (ok-t , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync (out ok-t) inp ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ io-true , (f , g) , refl , (ok-t , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync inp (out ok-t) ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ io-false , (f , g) , refl , (ok-f , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync inp (out ok-f) ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÅ io-both , (f , g) , refl , (ok-t , _) , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync inp (out ok-t) ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÇ co-oi , (f , g , b) , refl , ok-b , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync (out ok-b) inp ‚óÖ red-Sys' , Succ
  ‚ä¢·µ¢-implies-succeed (fold (inj‚ÇÇ co-io , (f , g , b) , refl , ok-b , pr)) =
    let Sys' , red-Sys' , Succ = ‚ä¢·µ¢-implies-succeed (pr zero) in
    Sys' , sync inp (out ok-b) ‚óÖ red-Sys' , Succ

  win-reduces-‚ä• : ‚àÄ{S S' Œ±} ‚Üí Win S ‚Üí Transition S Œ± S' ‚Üí ‚ä•
  win-reduces-‚ä• (out e) (out !x) = e _ !x
  
  success-reduces-‚ä• : ‚àÄ{S S'} ‚Üí Success S ‚Üí Reduction S S' ‚Üí ‚ä•
  success-reduces-‚ä• (win#def win _) (sync r _) = win-reduces-‚ä• win r

  fc-sound : ‚àÄ{S T} ‚Üí S ‚ä¢ T ‚Üí FairComplianceS (S # T)
  fc-sound fc Œµ = ‚ä¢·µ¢-implies-succeed (gen-to-ind fc) 
  fc-sound fc (x ‚óÖ red) with fc .CoInd‚ü¶_‚üß.unfold
  fc-sound fc (x ‚óÖ red) | client-end , _ , refl , ((win , def) , _) , _ = ‚ä•-elim (success-reduces-‚ä• (win#def win def) x)
  fc-sound fc (sync (out ok-f) (inp {x = false}) ‚óÖ red) | oi-true , _ , refl , ((_ , no-f) , _) , _ = ‚ä•-elim (no-f ok-f)
  fc-sound fc (sync (out _) (inp {x = true}) ‚óÖ red) | oi-true , _ , refl , ((_ , _) , _) , pr = fc-sound (pr zero) red
  fc-sound fc (sync (out _) (inp {x = false}) ‚óÖ red) | oi-false , _ , refl , ((_ , _) , _) , pr = fc-sound (pr zero) red
  fc-sound fc (sync (out ok-t) (inp {x = true}) ‚óÖ red) | oi-false , _ , refl , ((_ , no-t) , _) , _ = ‚ä•-elim (no-t ok-t)
  fc-sound fc (sync (out _) (inp {x = false}) ‚óÖ red) | oi-both , _ , refl , _ , pr = fc-sound (pr (suc zero)) red
  fc-sound fc (sync (out _) (inp {x = true}) ‚óÖ red) | oi-both , _ , refl , _ , pr = fc-sound (pr zero) red
  fc-sound fc (sync (inp {x = false}) (out ok-f) ‚óÖ red) | io-true , _ , refl , ((_ , no-f) , _) , _ = ‚ä•-elim (no-f ok-f)
  fc-sound fc (sync (inp {x = true}) (out _) ‚óÖ red) | io-true , _ , refl , ((_ , _) , _) , pr = fc-sound (pr zero) red
  fc-sound fc (sync (inp {x = false}) (out _) ‚óÖ red) | io-false , _ , refl , ((_ , _) , _) , pr = fc-sound (pr zero) red
  fc-sound fc (sync (inp {x = true}) (out ok-t) ‚óÖ red) | io-false , _ , refl , ((_ , no-t) , _) , _ = ‚ä•-elim (no-t ok-t)
  fc-sound fc (sync (inp {x = false}) (out _) ‚óÖ red) | io-both , _ , refl , _ , pr = fc-sound (pr (suc zero)) red
  fc-sound fc (sync (inp {x = true}) (out _) ‚óÖ red) | io-both , _ , refl , _ , pr = fc-sound (pr zero) red

  {- Boundedness -}
  maysucceed-implies-‚ä¢·µ¢ : ‚àÄ{S T Sys} ‚Üí Reductions (S # T) Sys ‚Üí Success Sys ‚Üí S ‚ä¢·µ¢ T
  maysucceed-implies-‚ä¢·µ¢ Œµ (win#def win def) = IS.fold (inj‚ÇÅ client-end , _ , refl , (win , def) , Œª ())
  maysucceed-implies-‚ä¢·µ¢ (sync (out ok) inp ‚óÖ red) Succ =
    let rec = maysucceed-implies-‚ä¢·µ¢ red Succ in
    IS.fold (inj‚ÇÇ co-oi , _ , refl , ok , Œª{zero ‚Üí rec})
  maysucceed-implies-‚ä¢·µ¢ (sync inp (out ok) ‚óÖ red) Succ =
    let rec = maysucceed-implies-‚ä¢·µ¢ red Succ in
    IS.fold (inj‚ÇÇ co-io , _ , refl , ok , Œª{zero ‚Üí rec})

  fc-bounded : ‚àÄ{S T} ‚Üí FairComplianceS (S # T) ‚Üí S ‚ä¢·µ¢ T
  fc-bounded fc =
    let _ , red-Sys , Succ = fc Œµ in
    maysucceed-implies-‚ä¢·µ¢ red-Sys Succ

  {- Consistency -}
  fc-consistent : ‚àÄ{S T} ‚Üí FairComplianceS (S # T) ‚Üí ISF[ FCompIS ] (Œª{(S , T) ‚Üí FairComplianceS (S # T)}) (S , T)
  fc-consistent fc with fc Œµ
  fc-consistent fc | .(_ # _) , Œµ , win#def win def = client-end , _ , refl , (win , def) , Œª ()
  fc-consistent {out f} fc | _ , sync (out ok-f) (inp {x = false}) ‚óÖ _ , _ with true ‚àà? f
  fc-consistent {out f} fc | _ , sync (out ok-f) (inp {_} {false}) ‚óÖ _ , _ | no no-t =
    oi-false , _ , refl , (ok-f , no-t) , Œª{zero ‚Üí Œª red ‚Üí fc (sync (out ok-f) inp ‚óÖ red)}
  fc-consistent {out f} fc | _ , sync (out ok-f) (inp {_} {false}) ‚óÖ _ , _ | yes ok-t =
    let prems = Œª{
              zero ‚Üí Œª red ‚Üí fc (sync (out ok-t) inp ‚óÖ red) ;
              (suc zero) ‚Üí Œª red ‚Üí fc (sync (out ok-f) inp ‚óÖ red)} in
    oi-both , _ , refl , (ok-t , ok-f) , prems
  fc-consistent {out f} fc | _ , sync (out ok-t) (inp {x = true}) ‚óÖ _ , _ with false ‚àà? f
  fc-consistent {out f} fc | _ , sync (out ok-t) (inp {_} {true}) ‚óÖ _ , _ | no no-f =
    oi-true , _ , refl , (ok-t , no-f) , Œª{zero ‚Üí Œª red ‚Üí fc (sync (out ok-t) inp ‚óÖ red)}
  fc-consistent {out f} fc | _ , sync (out ok-t) (inp {_} {true}) ‚óÖ _ , _ | yes ok-f =
    let prems = Œª{
              zero ‚Üí Œª red ‚Üí fc (sync (out ok-t) inp ‚óÖ red) ;
              (suc zero) ‚Üí Œª red ‚Üí fc (sync (out ok-f) inp ‚óÖ red)} in
    oi-both , _ , refl , (ok-t , ok-f) , prems
  fc-consistent {_} {out g} fc | _ , sync (inp {x = false}) (out ok-f) ‚óÖ _ , _ with true ‚àà? g
  fc-consistent {_} {out g} fc | _ , sync (inp {x = false}) (out ok-f) ‚óÖ _ , _ | no no-t =
    io-false , _ , refl , (ok-f , no-t) , Œª{zero ‚Üí Œª red ‚Üí fc (sync inp (out ok-f) ‚óÖ red)}
  fc-consistent {_} {out g} fc | _ , sync (inp {x = false}) (out ok-f) ‚óÖ _ , _ | yes ok-t =
    let prems = Œª{
              zero ‚Üí Œª red ‚Üí fc (sync inp (out ok-t) ‚óÖ red) ;
              (suc zero) ‚Üí Œª red ‚Üí fc (sync inp (out ok-f) ‚óÖ red)} in
    io-both , _ , refl , (ok-t , ok-f) , prems
  fc-consistent {_} {out g} fc | _ , sync (inp {x = true}) (out ok-t) ‚óÖ _ , _ with false ‚àà? g
  fc-consistent {_} {out g} fc | _ , sync (inp {x = true}) (out ok-t) ‚óÖ _ , _ | no no-f =
    io-true , _ , refl , (ok-t , no-f) , Œª{zero ‚Üí Œª red ‚Üí fc (sync inp (out ok-t) ‚óÖ red)}
  fc-consistent {_} {out g} fc | _ , sync (inp {x = true}) (out ok-t) ‚óÖ _ , _ | yes ok-f =
    let prems = Œª{
              zero ‚Üí Œª red ‚Üí fc (sync inp (out ok-t) ‚óÖ red) ;
              (suc zero) ‚Üí Œª red ‚Üí fc (sync inp (out ok-f) ‚óÖ red)} in
    io-both , _ , refl , (ok-t , ok-f) , prems

  {- Completeness -}
  fc-complete : ‚àÄ{S T} ‚Üí FairComplianceS (S # T) ‚Üí S ‚ä¢ T
  fc-complete =
    let S = Œª{(S , T) ‚Üí FairComplianceS (S # T)} in
    bounded-coind[ FCompIS , FCompCOIS ] S fc-bounded fc-consistent
